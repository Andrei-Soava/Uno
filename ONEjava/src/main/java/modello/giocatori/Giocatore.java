// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package modello.giocatori;

import modello.Mossa;
import modello.Mossa.TipoMossa;
import modello.PartitaIF;
import modello.carte.Carta;
import modello.carte.Colore;

/************************************************************/

/**
 * classe che modella il giocatore in una partita
 * 
 * attributi importanti:
 * nome
 * booleano haPremutoOne per indicare se il giocatore ha una sola carta in mano
 * riferimento ad una mano--> contiente le carte del giocatore
 * riferimento ad una partita mediante un'interfaccia (settata)
 * 
 * metodi importanti:
 * giocaTurno()--> astratto, aspetto decisionale della partita (cambia tra bot e giocatore fisico)
 * aggiungiCarta()--> aggiunge carta in mano
 * rimuoviCarta()--> rimuove carta dalla mano
 * cambiaModalita()--> cambia tra modalita bot e non-bot
 * 
 * 
 */
public abstract class Giocatore {
	protected String nome;
	protected boolean haPremutoOne;
	protected Mano mano;
	protected boolean bot;
	protected PartitaIF partitaIF;

	public Giocatore (String nome) {
		this.nome=nome;
		this.mano=new Mano();
		this.haPremutoOne=false;
		this.partitaIF=null;
		this.bot=false;
	}
	
	public void aggiungiCarta(Carta c) {
		mano.aggiungiCarta(c);
	}
	
	public void rimuoveCarta(Carta c) {
		mano.rimuoviCarta(c);
	}
	
	public String getNome() {
		return this.nome;
	}
	
	public Mano getMano() {
		return this.mano;
	}
	
	public void haPremutoOne() {
	}
	
	public void setPremutoOne() {
	}
	
	public PartitaIF getInterfacciaPartita() {
		return partitaIF;
	}

	public void setInterfacciaPartita(PartitaIF interfacciaPartita) {
		this.partitaIF = interfacciaPartita;
	}
	
	public void cambiaModalita() {
		bot=!bot;
	}
	
	public boolean isBot() {
		return bot;
	}
	
	public Mossa scegliMossaAutomatica() {
		Mossa m;
		for(Carta c:this.getMano().getCarte()) {
			if(partitaIF.tentaGiocaCarta(c)) {
				m=new Mossa(TipoMossa.GIOCA_CARTA,c);
				if(c.getColore()==Colore.NERO) {
					c.setColore(Colore.scegliColoreCasuale());
					m.setTipoMossa(TipoMossa.SCEGLI_COLORE);
				}
				return m;
			}
		}
		m=new Mossa(TipoMossa.PESCA);
		Carta pescata=partitaIF.pescaCarta();
		if(partitaIF.tentaGiocaCarta(pescata)) {
			m.setTipoMossa(TipoMossa.GIOCA_CARTA);
			if(pescata.getColore()==Colore.NERO) {
				pescata.setColore(Colore.scegliColoreCasuale());
				m.setTipoMossa(TipoMossa.SCEGLI_COLORE);
			}
		}
		return m;
		
	}
	
	public String mostraCarteInMano() {
		String str="";
		int i=0;
		for(Carta c:mano.getCarte()) {
			str+=i+":"+c+"\n";
			i++;
		}
		return str;
	}
	
	@Override
	public String toString() {
		return "Giocatore [nome=" + nome + ", carte=" + mano.getNumCarte() + "]";
	}
	
}
