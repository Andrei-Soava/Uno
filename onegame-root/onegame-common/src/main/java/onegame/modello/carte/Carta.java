// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package onegame.modello.carte;

/************************************************************/

/**
 * Classe astratta che modella una carta generica del gioco UNO.
 * <p>
 * Attributi principali:
 * <ul>
 *   <li><b>colore</b>: rappresenta il colore della carta. Può essere modificato, ad esempio nel caso delle carte jolly.</li>
 * </ul>
 * <p>
 * Metodi principali:
 * <ul>
 *   <li>{@link #giocabileSu(Carta)}: metodo astratto che determina se la carta può essere giocata sopra un'altra carta specificata come parametro.</li>
 *   <li>{@link #applicaEffetto(Partita)}: metodo astratto che applica l'effetto della carta alla partita.</li>
 *   <li>{@link #compareTo(Carta)}: confronta due carte in base al colore secondo una gerarchia definita.</li>
 *   <li>{@link #getColore()}: restituisce il colore della carta.</li>
 *   <li>{@link #setColore(Colore)}: imposta il colore della carta.</li>
 * </ul>
 * <p>
 * Serializzazione:
 * <ul>
 *   <li>Annotazioni Jackson per la serializzazione/deserializzazione polimorfica delle sottoclassi.</li>
 * </ul>
 */
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import onegame.modello.PartitaIF;
import onegame.modello.carte.CartaSpeciale.TipoSpeciale;

import com.fasterxml.jackson.annotation.JsonSubTypes;

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, // usa un nome leggibile
		include = JsonTypeInfo.As.PROPERTY, // aggiungi un campo nel JSON
		property = "tipoCarta" // nome del campo nel JSON
)
@JsonSubTypes({ @JsonSubTypes.Type(value = CartaNumero.class, name = "numero"),
		@JsonSubTypes.Type(value = CartaSpeciale.class, name = "speciale") })
public abstract class Carta {
	/**
	 * Colore della carta. Può essere modificato (ad esempio per le carte jolly).
	 */
	protected Colore colore;

	/**
	 * Costruttore vuoto richiesto per la deserializzazione con Jackson.
	 */
	public Carta() {
	}

	/**
	 * Costruttore che inizializza la carta con un colore specifico.
	 * 
	 * @param colore il colore della carta
	 */
	public Carta(Colore colore) {
		this.colore = colore;
	}

	/**
	 * Restituisce il colore della carta.
	 * 
	 * @return il colore della carta
	 */
	public Colore getColore() {
		return this.colore;
	}

	/**
	 * Imposta il colore della carta.
	 * 
	 * @param colore il nuovo colore da assegnare alla carta
	 */
	public void setColore(Colore colore) {
		this.colore = colore;
	}

	public static CartaNumero numero(Colore colore, int num) {
		return new CartaNumero(colore, num);
	}

	public static CartaSpeciale skip(Colore colore) {
		return new CartaSpeciale(colore, TipoSpeciale.BLOCCA);
	}

	public static CartaSpeciale cambioGiro(Colore colore) {
		return new CartaSpeciale(colore, TipoSpeciale.INVERTI);
	}

	public static CartaSpeciale pescaDue(Colore colore) {
		return new CartaSpeciale(colore, TipoSpeciale.PIU_DUE);
	}

	public static Carta cambioColore() {
		return new CartaSpeciale(Colore.NERO, TipoSpeciale.JOLLY);
	}

	public static Carta pescaQuattro() {
		return new CartaSpeciale(Colore.NERO, TipoSpeciale.PIU_QUATTRO);
	}

	/**
	 * Applica l'effetto della carta alla partita.
	 * 
	 * @param p la partita su cui applicare l'effetto
	 */
	public abstract void applicaEffetto(PartitaIF p);

	/**
	 * Determina se la carta può essere giocata sopra la carta specificata.
	 * 
	 * @param c la carta presente sul banco
	 * @return true se la carta può essere giocata, false altrimenti
	 */
	public abstract boolean giocabileSu(Carta c);
}
