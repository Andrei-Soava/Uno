// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package onegame.modello.giocatori;

import com.fasterxml.jackson.annotation.JsonIgnore;

import onegame.modello.Mossa;
import onegame.modello.PartitaIF;
import onegame.modello.Mossa.TipoMossa;
import onegame.modello.carte.Carta;
import onegame.modello.carte.Colore;

/************************************************************/

/**
 * classe che modella il giocatore in una partita
 * 
 * attributi importanti:
 * nome
 * booleano haPremutoOne per indicare se il giocatore ha una sola carta in mano
 * riferimento ad una mano--> contiente le carte del giocatore
 * riferimento ad una partita mediante un'interfaccia (settata)
 * 
 * metodi importanti:
 * giocaTurno()--> astratto, aspetto decisionale della partita (cambia tra bot e giocatore fisico)
 * aggiungiCarta()--> aggiunge carta in mano
 * rimuoviCarta()--> rimuove carta dalla mano
 * cambiaModalita()--> cambia tra modalita bot e non-bot
 * PROVA
 * 
 */

//import com.fasterxml.jackson.annotation.JsonTypeInfo;
//import com.fasterxml.jackson.annotation.JsonSubTypes;

/*
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME, // usa un nome leggibile
    include = JsonTypeInfo.As.PROPERTY, // aggiungi un campo nel JSON
    property = "tipoGiocatore" // nome del campo nel JSON
)
@JsonSubTypes({
    @JsonSubTypes.Type(value = GiocatoreAnonimo.class, name = "anonimo")
    // qui puoi aggiungere altre sottoclassi in futuro
})
*/
public class Giocatore {
	private String nome;
	private Mano mano;
	private boolean bot;

	//costruttore vuoto per Jackson
	public Giocatore() {}
	
	public Giocatore (String nome) {
		this.nome = nome;
		this.mano = new Mano();
		this.bot = false;
	}
	
	/**
	 * metodo che aggiunge carta nella mano
	 * 
	 * @param c carta aggiunta
	 */
	public void aggiungiCarta(Carta c) {
		mano.aggiungiCarta(c);
	}
	
	/**
	 * metodo che rimuove carta da mano (coerenza mantenuta nel controllore)
	 * 
	 * @param c carta rimossa
	 */
	public void rimuoveCarta(Carta c) {
		mano.rimuoviCarta(c);
	}
	
	public String getNome() {
		return this.nome;
	}
	
	public Mano getMano() {
		return this.mano;
	}
	
	/**
	 * metodo che rende un giocatore umano un bot e viceversa
	 * (utile per partite offline)
	 */
	public void cambiaModalita() {
		bot=!bot;
	}
	
	/**
	 * getter per vedere se giocatore Ã¨ un bot (=true) o meno (=false)
	 * (utile per partite offline e online con perdita di connessione)
	 */
	public boolean isBot() {
		return bot;
	}
	
	public String mostraCarteInMano() {
		String str="";
		int i=0;
		for(Carta c:mano.getCarte()) {
			str+=i+":"+c+"\n";
			i++;
		}
		return str;
	}
	
	@Override
	public String toString() {
		return "Giocatore [nome=" + nome + ", carte=" + mano.getNumCarte() + "]";
	}
	
}
