// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package onegame.modello.giocatori;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import onegame.modello.carte.Carta;
import onegame.modello.carte.CartaComparator;

/************************************************************/

/**
 * classe che modella la mano di un giocatore
 * 
 * attributi importanti:
 * lista delle carte in mano
 * 
 * metodi importanti:
 * aggiungiCarta()--> aggiunge una carta o una lista di carte alla mano (overloading)
 * rimuoviCarta()--> rimuovi una carta dalla mano
 * 
 */
public class Mano {
	private static final CartaComparator cartaComparator = new CartaComparator();
	
	private ArrayList<Carta> carte;

	public Mano() {
		this.carte=new ArrayList<>();
	}
	
	/**
	 * metodo di aggiunta di una carta
	 * 
	 * @param c carta aggiunta
	 */
	public void aggiungiCarta(Carta c) {
		carte.add(c);
		Collections.sort(carte, cartaComparator);
	}
	
	/**
	 * metodo di aggiunta di pi√π carte
	 * 
	 * @param c carte aggiunte
	 */
	public void aggiungiCarte(List<Carta> c) {
		carte.addAll(c);
		Collections.sort(carte, cartaComparator);
	}
	
	/**
	 * metodo di rimozione di una carta
	 * 
	 * @param c
	 */
	public void rimuoviCarta(Carta c) {
		carte.remove(c);
	}

	public ArrayList<Carta> getCarte() {
		return carte;
	}

	public boolean contieneCarta(Carta c) {
        return carte.contains(c);
    }
	
	/**
     * Restituisce la prima carta giocabile (strategia semplice) oppure null se non esiste.
     */
    public Carta primaCartaGiocabile(Carta cartaCorrente) {
        for (Carta c : carte) {
            if (c.giocabileSu(cartaCorrente)) return c;
        }
        return null;
    }
    
    /**
     * Restituisce true se la mano contiene almeno una carta giocabile sulla carta corrente.
     */
    public boolean haCartaValida(Carta cartaCorrente) {
        for (Carta c : carte) {
            if (c.giocabileSu(cartaCorrente)) return true;
        }
        return false;
    }
	
	public void setCarte(ArrayList<Carta> carte) {
		this.carte = carte;
	}
	
	@JsonIgnore
	public int getNumCarte() {
		return carte.size();
	}
	
	@Override
    public String toString() {
        return "Mano[num=" + getNumCarte() + ", carte=" + carte + "]";
    }
}
